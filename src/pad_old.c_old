#include "pad.h"

char padBuf[256] __attribute__((aligned(64)));
static u32 old_pad = 0;
static u32 new_pad;
static u32 currData;
u32 port;
u32 slot;
struct padButtonStatus buttons;
extern char* print_out;

void UpdatePad()
{
    s32 state = padGetState(port, 0);

    if (state == PAD_STATE_DISCONN)
    {
        ERRORLOG("Pad(%d, %d) is disconnected", port, slot);
        return;
    }

    state = padRead(port, 0, &buttons);

    if (state != 0)
    {
        currData = 0xffff ^ buttons.btns;

        new_pad = currData & ~old_pad;
        old_pad = currData;

        int moveCamera = 0;

        if (buttons.rjoy_h <= 50)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 4);
        }
        else if (buttons.rjoy_h >= 200)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 3);
        }

        if (buttons.ljoy_h <= 50)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 1);
        }
        else if (buttons.ljoy_h >= 200)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 2);
        }

        if (buttons.rjoy_v <= 50)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 8);
        }
        else if (buttons.rjoy_v >= 200)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 7);
        }

        if (buttons.ljoy_v >= 200)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 6);
        }
        else if (buttons.ljoy_v <= 50)
        {
            moveCamera = HandleCamMovement(manager.mainCam, 5);
        }

        if (moveCamera)
        {
            UpdateCameraMatrix(manager.mainCam);
        }

        int moveBody = 0;

        GameObject *trans = GetObjFromManagerList(&manager, 4);

        if (currData & PAD_SQUARE)
        {
            moveBody |= HandleBodyMovement(trans, 4);
        }
        if (currData & PAD_CIRCLE)
        {
            moveBody |= HandleBodyMovement(trans, 3);
        }
        if (currData & PAD_TRIANGLE)
        {
            moveBody |= HandleBodyMovement(trans, 7);
        }
        if (currData & PAD_CROSS)
        {
            moveBody |= HandleBodyMovement(trans, 8);
        }

        if (new_pad & PAD_SELECT)
        {
            print_out = "NOw YOU DID IT!";
        }
        if (currData & PAD_DOWN)
        {
            moveBody |= HandleBodyMovement(trans, 5);
        }
        if (currData & PAD_UP)
        {
            moveBody |= HandleBodyMovement(trans, 6);
        }
        if (currData & PAD_LEFT)
        {
            moveBody |= HandleBodyMovement(trans, 1);
        }
        if (currData & PAD_RIGHT)
        {
            moveBody |= HandleBodyMovement(trans, 2);
        }

        if (moveBody & 0x01)
        {
            CreateTranslationMatrix(trans->pos, trans->translation);
        }
        else if (moveBody & 0x02)
        {
            CreateRotationMatFromObjAxes(trans, trans->up, trans->forward, trans->right);
        }

        if (new_pad & PAD_R1)
        {
            trans->obb->type = (trans->obb->type == BBO_FIT) ? BBO_FIXED : BBO_FIT;
        }
    }
}